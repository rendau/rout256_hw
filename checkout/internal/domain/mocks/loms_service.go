// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "route256/checkout/internal/domain/models"
)

// ILomsService is an autogenerated mock type for the ILomsService type
type ILomsService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, user, cart
func (_m *ILomsService) CreateOrder(ctx context.Context, user int64, cart *models.CartSt) (int64, error) {
	ret := _m.Called(ctx, user, cart)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.CartSt) (int64, error)); ok {
		return rf(ctx, user, cart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.CartSt) int64); ok {
		r0 = rf(ctx, user, cart)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *models.CartSt) error); ok {
		r1 = rf(ctx, user, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stocks provides a mock function with given fields: ctx, sku
func (_m *ILomsService) Stocks(ctx context.Context, sku uint32) ([]models.StockSt, error) {
	ret := _m.Called(ctx, sku)

	var r0 []models.StockSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]models.StockSt, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []models.StockSt); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StockSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILomsService creates a new instance of ILomsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILomsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILomsService {
	mock := &ILomsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
