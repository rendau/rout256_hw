// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "route256/checkout/internal/domain/models"
)

// IProductService is an autogenerated mock type for the IProductService type
type IProductService struct {
	mock.Mock
}

// GetProduct provides a mock function with given fields: ctx, sku
func (_m *IProductService) GetProduct(ctx context.Context, sku int64) (*models.ProductSt, error) {
	ret := _m.Called(ctx, sku)

	var r0 *models.ProductSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.ProductSt, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.ProductSt); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSKUs provides a mock function with given fields: ctx, startAfterSku, Count
func (_m *IProductService) ListSKUs(ctx context.Context, startAfterSku int64, Count int64) ([]int64, error) {
	ret := _m.Called(ctx, startAfterSku, Count)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]int64, error)); ok {
		return rf(ctx, startAfterSku, Count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []int64); ok {
		r0 = rf(ctx, startAfterSku, Count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, startAfterSku, Count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductService creates a new instance of IProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductService {
	mock := &IProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
