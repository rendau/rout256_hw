// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "route256/checkout/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CartCreate provides a mock function with given fields: ctx, obj
func (_m *Repo) CartCreate(ctx context.Context, obj *models.CartSt) (int64, error) {
	ret := _m.Called(ctx, obj)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.CartSt) (int64, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.CartSt) int64); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.CartSt) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartGet provides a mock function with given fields: ctx, id
func (_m *Repo) CartGet(ctx context.Context, id int64) (*models.CartSt, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.CartSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.CartSt, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.CartSt); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartGetByUsrId provides a mock function with given fields: ctx, userId
func (_m *Repo) CartGetByUsrId(ctx context.Context, userId int64) (*models.CartSt, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.CartSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.CartSt, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.CartSt); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartItemGet provides a mock function with given fields: ctx, cartId, sku
func (_m *Repo) CartItemGet(ctx context.Context, cartId int64, sku uint32) (*models.CartItemSt, error) {
	ret := _m.Called(ctx, cartId, sku)

	var r0 *models.CartItemSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) (*models.CartItemSt, error)); ok {
		return rf(ctx, cartId, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) *models.CartItemSt); ok {
		r0 = rf(ctx, cartId, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartItemSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, uint32) error); ok {
		r1 = rf(ctx, cartId, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartItemList provides a mock function with given fields: ctx, pars
func (_m *Repo) CartItemList(ctx context.Context, pars models.CartItemListParsSt) ([]*models.CartItemSt, error) {
	ret := _m.Called(ctx, pars)

	var r0 []*models.CartItemSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CartItemListParsSt) ([]*models.CartItemSt, error)); ok {
		return rf(ctx, pars)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CartItemListParsSt) []*models.CartItemSt); ok {
		r0 = rf(ctx, pars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CartItemSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CartItemListParsSt) error); ok {
		r1 = rf(ctx, pars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartItemRemove provides a mock function with given fields: ctx, cartId, sku
func (_m *Repo) CartItemRemove(ctx context.Context, cartId int64, sku uint32) error {
	ret := _m.Called(ctx, cartId, sku)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) error); ok {
		r0 = rf(ctx, cartId, sku)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartItemRemoveAllForCartId provides a mock function with given fields: ctx, cartId
func (_m *Repo) CartItemRemoveAllForCartId(ctx context.Context, cartId int64) error {
	ret := _m.Called(ctx, cartId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartItemSet provides a mock function with given fields: ctx, obj
func (_m *Repo) CartItemSet(ctx context.Context, obj *models.CartItemSt) error {
	ret := _m.Called(ctx, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.CartItemSt) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartList provides a mock function with given fields: ctx, pars
func (_m *Repo) CartList(ctx context.Context, pars models.CartListParsSt) ([]*models.CartSt, error) {
	ret := _m.Called(ctx, pars)

	var r0 []*models.CartSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CartListParsSt) ([]*models.CartSt, error)); ok {
		return rf(ctx, pars)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CartListParsSt) []*models.CartSt); ok {
		r0 = rf(ctx, pars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CartSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CartListParsSt) error); ok {
		r1 = rf(ctx, pars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartRemove provides a mock function with given fields: ctx, id
func (_m *Repo) CartRemove(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
