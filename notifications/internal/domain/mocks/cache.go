// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ICache is an autogenerated mock type for the ICache type
type ICache struct {
	mock.Mock
}

// GetJsonObj provides a mock function with given fields: ctx, key, dst
func (_m *ICache) GetJsonObj(ctx context.Context, key string, dst interface{}) (bool, error) {
	ret := _m.Called(ctx, key, dst)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, key, dst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, dst)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, dst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetJsonObj provides a mock function with given fields: ctx, key, value, expiration
func (_m *ICache) SetJsonObj(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICache creates a new instance of ICache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICache {
	mock := &ICache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
