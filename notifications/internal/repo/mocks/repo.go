// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "route256/notifications/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// OrderStatusEventCreate provides a mock function with given fields: ctx, obj
func (_m *Repo) OrderStatusEventCreate(ctx context.Context, obj *models.OrderStatusEventSt) error {
	ret := _m.Called(ctx, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderStatusEventSt) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderStatusEventList provides a mock function with given fields: ctx, pars
func (_m *Repo) OrderStatusEventList(ctx context.Context, pars *models.OrderStatusEventListParsSt) ([]*models.OrderStatusEventSt, error) {
	ret := _m.Called(ctx, pars)

	var r0 []*models.OrderStatusEventSt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderStatusEventListParsSt) ([]*models.OrderStatusEventSt, error)); ok {
		return rf(ctx, pars)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderStatusEventListParsSt) []*models.OrderStatusEventSt); ok {
		r0 = rf(ctx, pars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrderStatusEventSt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OrderStatusEventListParsSt) error); ok {
		r1 = rf(ctx, pars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
